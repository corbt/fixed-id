import "hashes/poseidon/poseidon" as poseidon
import "ecc/proofOfOwnership" as proofOfOwnership
from "ecc/babyjubjubParams" import BABYJUBJUB_PARAMS

struct MerkleProofStep {
  bool isRightNode
  field otherDigest
}

def verifyMerkleProof<Depth>(field rootDigest, field leafDigest, MerkleProofStep[Depth] merkleProof) -> bool:
  field currentDigest = leafDigest

  for u32 i in 0..Depth do
    MerkleProofStep currentStep = merkleProof[i]

    field lhs = if currentStep.isRightNode \
      then currentDigest \
      else currentStep.otherDigest \
    fi

    field rhs = if currentStep.isRightNode \
      then currentStep.otherDigest \
      else currentDigest \
    fi

    currentDigest = if currentStep.otherDigest == 0 \
      then currentDigest \
      else poseidon([lhs, rhs]) \
    fi
  endfor

  assert(currentDigest == rootDigest)
  return true

def main(\
  field rootDigest, \
  field appId, \
  field nonce, \
  field maxAliases, \
  field appToken, \
  field[2] publicKey, \
  private field fixedId, \
  private field privateKey, \
  private field password, \
  private field aliasId, \
  private MerkleProofStep[33] merkleProof \
):
  // The user's leaf node should be a hash of their fixedId, public key, and
  // password hash. By hashing the password within the proof itself, we
  // guarantee that the proof submitter knows the actual password, not just the
  // publicly-known hash.
  field leafDigest = poseidon([fixedId, publicKey[0] + publicKey[1], poseidon([password])])
  
  // Ensure that the user's leaf does in fact exist in the public Merkle tree of
  // all active users. This check also ensures that their fixedId, publicKey,
  // and password are valid, because otherwise they wouldn't be able to generate
  // a Merkle proof demonstrating their inclusion in the publicly-known tree.
  assert(verifyMerkleProof(rootDigest, leafDigest, merkleProof))

  // Ensure that the appToken is correctly composed. Because hashing is
  // deterministic and all of the hash's inputs elements are either controlled
  // by the app or publicly fixed in the Merkle tree, the a user can only
  // generate one valid `appToken` per app and `aliasId`.
  assert(appToken == poseidon([fixedId, appId, password, aliasId]))

  // Apps can use the `maxAliases` argument to choose how many valid aliases
  // each FixedID can create for their app.
  assert(aliasId < maxAliases)

  // Users must demonstrate they know the private key associated with the app's
  // public key. This is critical to prevent an impostor who steals someone's
  // `password` from generating valid credentials.
  assert(proofOfOwnership(publicKey, privateKey, BABYJUBJUB_PARAMS))

  return
