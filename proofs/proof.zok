import "hashes/poseidon/poseidon" as poseidon

struct MerkleProofStep {
  bool isRightNode
  field otherDigest
}

def verifyMerkleProof<Depth>(field rootDigest, field leafDigest, MerkleProofStep[Depth] merkleProof) -> bool:
  field currentDigest = leafDigest

  for u32 i in 0..Depth do
    MerkleProofStep currentStep = merkleProof[i]

    field lhs = if currentStep.isRightNode then currentDigest else currentStep.otherDigest fi
    field rhs = if currentStep.isRightNode then currentStep.otherDigest else currentDigest fi
    currentDigest = poseidon([lhs, rhs])
  endfor

  assert(currentDigest == rootDigest)
  return true

def main(field rootDigest, field appId, field nonce, field maxAliases, field appToken, field publicKey, private field fixedId, private field privateKey, private field password, private field aliasId, private MerkleProofStep[2] merkleProof):
  field leafDigest = poseidon([fixedId, publicKey, poseidon([password])])

  assert(verifyMerkleProof(rootDigest, leafDigest, merkleProof))

  // Dummy assertions to make the ZoKrates compiler happy
  assert(privateKey == 3)
  assert(aliasId == 2)
  return
